for (j in 1:length(snotel_ls)) {
swe_diff.v <- numeric(length = 0)
#Snotel dry days after Oct 1 and before May 1: Snow Season
#This defines dry days as 0 accumulation
snotel_drydays<-snotel_ls[[j]][snotel_ls[[j]]$precip_inc == 0.0 & (snotel_ls[[j]]$month < 5 | snotel_ls[[j]]$month > 10), ]
#this splits up all the days that are consecutive to their own list object
drydaysls<-split(snotel_drydays$doy, cumsum(c(1, diff(snotel_drydays$doy) != 1)))
median_dry<-median(lengths(drydaysls))
max_dry <-max(lengths(drydaysls))
for (i in 1:length(drydaysls)){
if (length(drydaysls[[i]]) > 2 ){ # I would change this 2 to either median dry days for each year or max dry days
swe_diff.v[i] <- snotel_drydays[snotel_drydays$doy == min(drydaysls[[i]]),]$swe -
snotel_drydays[ snotel_drydays$doy == max(drydaysls[[i]]),]$swe
}
}
swe_diff[[j]]<-swe_diff.v
names(swe_diff)<-2000:2022
max_dry[j] <- max_dry
median_dry[j] <- median_dry
}
swe_diff
swe_diff <- list(NA)
max_dry <- numeric(length = 0)
median_dry <- numeric(length = 0)
for (j in 1:length(snotel_ls)) {
swe_diff.v <- numeric(length = 0)
#Snotel dry days after Oct 1 and before May 1: Snow Season
#This defines dry days as 0 accumulation
snotel_drydays<-snotel_ls[[j]][snotel_ls[[j]]$precip_inc == 0.0 & (snotel_ls[[j]]$month < 5 | snotel_ls[[j]]$month > 10), ]
#this splits up all the days that are consecutive to their own list object
drydaysls<-split(snotel_drydays$doy, cumsum(c(1, diff(snotel_drydays$doy) != 1)))
median_dry<-median(lengths(drydaysls))
max_dry <-max(lengths(drydaysls))
for (i in 1:length(drydaysls)){
if (length(drydaysls[[i]]) > 2 ){ # I would change this 2 to either median dry days for each year or max dry days
swe_diff.v[i] <- snotel_drydays[snotel_drydays$doy == min(drydaysls[[i]]),]$swe -
snotel_drydays[ snotel_drydays$doy == max(drydaysls[[i]]),]$swe
}
}
swe_diff[[j]]<-swe_diff.v
names(swe_diff)<-2000:2022
max_dry[j] <- max_dry
median_dry[j] <- median_dry
}
swe_diff <- list(NA)
max_dry <- numeric(length = 0)
median_dry <- numeric(length = 0)
for (j in 1:length(snotel_ls)) {
swe_diff.v <- numeric(length = 0)
#Snotel dry days after Oct 1 and before May 1: Snow Season
#This defines dry days as 0 accumulation
snotel_drydays<-snotel_ls[[j]][snotel_ls[[j]]$precip_inc == 0.0 & (snotel_ls[[j]]$month < 5 | snotel_ls[[j]]$month > 10), ]
#this splits up all the days that are consecutive to their own list object
drydaysls<-split(snotel_drydays$doy, cumsum(c(1, diff(snotel_drydays$doy) != 1)))
median_dry<-median(lengths(drydaysls))
max_dry <-max(lengths(drydaysls))
for (i in 1:length(drydaysls)){
if (length(drydaysls[[i]]) > 2 ){ # I would change this 2 to either median dry days for each year or max dry days
swe_diff.v[i] <- snotel_drydays[snotel_drydays$doy == min(drydaysls[[i]]),]$swe -
snotel_drydays[ snotel_drydays$doy == max(drydaysls[[i]]),]$swe
}
}
swe_diff[[j]]<-swe_diff.v
#names(swe_diff)<-2000:2022
max_dry[j] <- max_dry
median_dry[j] <- median_dry
}
swe_diff
max_dry
median_dry
for (j in 1:length(snotel_ls)) {
swe_diff.v <- numeric(length = 0)
#Snotel dry days after Oct 1 and before May 1: Snow Season
#This defines dry days as 0 accumulation
snotel_drydays<-snotel_ls[[j]][snotel_ls[[j]]$precip_inc == 0.0 & (snotel_ls[[j]]$month < 5 | snotel_ls[[j]]$month > 10), ]
#this splits up all the days that are consecutive to their own list object
drydaysls<-split(snotel_drydays$doy, cumsum(c(1, diff(snotel_drydays$doy) != 1)))
median_dry[j]<-median(lengths(drydaysls))
max_dry[j] <-max(lengths(drydaysls))
}
snotel_metrics$median_dryd<-median_dry
snotel_metrics$mean_dryd<-max_dry
snotel_metrics$max_dryd<-max_dry
plot(snotel_metrics$year, snotel_metrics$max_dryd, type='l')
plot(snotel_metrics$year, snotel_metrics$max_dryd, type='l')
plot(snotel_metrics$year, snotel_metrics$median_dryd, type='l')
ggplot(snotel_metrics %>% filter(!is.na(before_after_f)),
aes(x=before_after_f, y=median_dryd, fill=before_after_f)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="Dark2") +
xlab( "Pre or Post Fire") + ylab('midwintermelt loss') + ggtitle( "Snotel site")
ggplot(snotel_metrics %>% filter(!is.na(before_after_f)),
aes(x=before_after_f, y=max_dryd, fill=before_after_f)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="Dark2") +
xlab( "Pre or Post Fire") + ylab('midwintermelt loss') + ggtitle( "Snotel site")
#install.packages('dataRetrieval')
library(dataRetrieval) # packaage for downloading USGS stream flow data
addWaterYear(snotel_ls[[1]])
test<-addWaterYear(snotel_ls[[1]])
colnames(test)
snotel_analysis<-function(snotel.df){
#changing names for more simple coding
colnames(snotel.df)<-c('Date', 'swe', 'precip_acc', 'temp_max', 'temp_min', 'temp_avg', 'precip_inc')
snotel.df$stationID <- 439
#Making time series in water year
#I am separating the date for each column
snotel.df$year <-lubridate::year(snotel.df$Date) # add year col
snotel.df$month <-lubridate::month(snotel.df$Date) # add month col
snotel.df$day <-lubridate::day(snotel.df$Date) # add day of month col
snotel.df$doy <-lubridate::yday(snotel.df$Date)# add day of year col
snotel.df$wy<- lubridate::wy(snotel.df$Date)
snotel.df<-addWaterYear(snotel_ls[[1]]) #add water year
snotel.df$year.fact<-as.factor(snotel.df$year)
snotel_ls<<-split(snotel.df, snotel.df$year.fact)
}
#Application of functions
snotel_allyears<-snotel_analysis(Snotel_2000_2022)
snotel_analysis<-function(snotel.df){
#changing names for more simple coding
colnames(snotel.df)<-c('Date', 'swe', 'precip_acc', 'temp_max', 'temp_min', 'temp_avg', 'precip_inc')
snotel.df$stationID <- 439
#Making time series in water year
#I am separating the date for each column
snotel.df$year <-lubridate::year(snotel.df$Date) # add year col
snotel.df$month <-lubridate::month(snotel.df$Date) # add month col
snotel.df$day <-lubridate::day(snotel.df$Date) # add day of month col
snotel.df$doy <-lubridate::yday(snotel.df$Date)# add day of year col
snotel.df<-addWaterYear(snotel_ls[[1]]) #add water year
snotel.df$year.fact<-as.factor(snotel.df$year)
snotel_ls<<-split(snotel.df, snotel.df$year.fact)
}
#Application of functions
snotel_allyears<-snotel_analysis(Snotel_2000_2022)
#Creating a usable data frame
snotel_metrics<-data.frame(time= 1:23,year=NA, peak_date=as.Date(NA), peakswe_mm=NA, time_of_melt=as.Date(NA), slope_melt=NA)
for (i in 1:length(snotel_allyears)) {
snotel_metrics$year[i]<-snotel_allyears[[i]]$year[1]
peak_swe<- max(snotel_allyears[[i]]$swe)
snotel_metrics$peakswe_mm[i]<-peak_swe*25.4
snotel_metrics$peak_swe_in[i]<-peak_swe
date<-snotel_allyears[[i]][snotel_allyears[[i]]$swe == peak_swe,]$Date
snotel_metrics$peak_date[i]<- date[1]
time_of_full_melt = snotel_allyears[[i]][snotel_allyears[[i]]$month > 2 & snotel_allyears[[i]]$swe == 0,]$Date[1]
snotel_metrics$time_of_melt[i] <- time_of_full_melt
#Find mean slope from start to peak flow
snotel_metrics$slope_melt[i]<- (peak_swe - snotel_allyears[[i]][snotel_allyears[[i]]$Date == as.Date(time_of_full_melt), ]$swe)/
as.numeric(time_of_full_melt[1]- date[1])
#snotel_metrics$temp_avg[i] <- mean(c(snotel_ls[[i-1]][snotel_ls[[i -1]]$month > 11,]$temp_avg,
#snotel_ls[[i]][snotel_ls[[i]]$month > 1 & snotel_ls[[i]]$month < 4,]$temp_avg))
#snotel_metrics$temp_max_w[i] <- mean(c(snotel_ls[[i-1]][snotel_ls[[i -1]]$month > 11,]$temp_max,
#snotel_ls[[i]][snotel_ls[[i]]$month > 1 & snotel_ls[[i]]$month < 4,]$temp_max))
snotel_metrics$precip_max[i] <- snotel_ls[[i]][snotel_ls[[i]]$swe == peak_swe,]$precip_acc
snotel_metrics$swe_precip[i]<-snotel_ls[[i]]$swe/snotel_ls[[i]]$precip_acc
} #moving average mean slope is still not working
snotel_metrics$peak_date<-as.Date(format(snotel_metrics$peak_date, format="%m-%d"), "%m-%d")
snotel_metrics$time_of_melt<-as.Date(format(snotel_metrics$time_of_melt, format="%m-%d"), "%m-%d")
snotel_metrics
#Creating a usable data frame
snotel_metrics<-data.frame(time= 1:23,year=NA, peak_date=as.Date(NA), peakswe_mm=NA, time_of_melt=as.Date(NA), slope_melt=NA)
#Creating a usable data frame
snotel_metrics<-data.frame(wyyear=NA, peak_date=as.Date(NA), peakswe_mm=NA, time_of_melt=as.Date(NA), slope_melt=NA)
snotel_metrics
#Creating a usable data frame
snotel_metrics<-data.frame(wyyear=NA, peak_date=as.Date(NA), peakswe_mm=NA, time_of_melt=as.Date(NA), slope_melt=NA)
snotel_metrics
snotel_analysis<-function(snotel.df){
#changing names for more simple coding
colnames(snotel.df)<-c('Date', 'swe', 'precip_acc', 'temp_max', 'temp_min', 'temp_avg', 'precip_inc')
snotel.df$stationID <- 439
#Making time series in water year
#I am separating the date for each column
snotel.df$year <-lubridate::year(snotel.df$Date) # add year col
snotel.df$month <-lubridate::month(snotel.df$Date) # add month col
snotel.df$day <-lubridate::day(snotel.df$Date) # add day of month col
snotel.df$doy <-lubridate::yday(snotel.df$Date)# add day of year col
snotel.df<-addWaterYear(snotel_ls[[1]]) #add water year
snotel.df$wyyear.fact<-as.factor(snotel.df$waterYear)
snotel_ls<<-split(snotel.df, snotel.df$wyyear.fact)
}
#Application of functions
snotel_allyears<-snotel_analysis(Snotel_2000_2022)
snotel_allyears
Snotel_2000_2022
tail(Snotel_2000_2022)
#Application of functions
snotel_allyears<-snotel_analysis(Snotel_2000_2022)
View(snotel_allyears)
View(snotel_allyears)
View(weather_forge)
View(weather_forge)
snotel_analysis<-function(snotel.df){
#changing names for more simple coding
colnames(snotel.df)<-c('Date', 'swe', 'precip_acc', 'temp_max', 'temp_min', 'temp_avg', 'precip_inc')
snotel.df$stationID <- 439
#Making time series in water year
#I am separating the date for each column
snotel.df$year <-lubridate::year(snotel.df$Date) # add year col
snotel.df$month <-lubridate::month(snotel.df$Date) # add month col
snotel.df$day <-lubridate::day(snotel.df$Date) # add day of month col
snotel.df$doy <-lubridate::yday(snotel.df$Date)# add day of year col
snotel.df<-addWaterYear(snotel_ls[[1]]) #add water year
snotel.df$wyyear.fact<-as.factor(snotel.df$waterYear)
snotel_ls<<-split(snotel.df, snotel.df$wyyear.fact)
}
#Application of functions
snotel_allyears<-snotel_analysis(Snotel_2000_2022)
snotel_analysis<-function(snotel.df){
#changing names for more simple coding
colnames(snotel.df)<-c('Date', 'swe', 'precip_acc', 'temp_max', 'temp_min', 'temp_avg', 'precip_inc')
snotel.df$stationID <- 439
#Making time series in water year
#I am separating the date for each column
snotel.df$year <-lubridate::year(snotel.df$Date) # add year col
snotel.df$month <-lubridate::month(snotel.df$Date) # add month col
snotel.df$day <-lubridate::day(snotel.df$Date) # add day of month col
snotel.df$doy <-lubridate::yday(snotel.df$Date)# add day of year col
snotel.df<-addWaterYear(snotel.df) #add water year
snotel.df$wyyear.fact<-as.factor(snotel.df$waterYear)
snotel_ls<<-split(snotel.df, snotel.df$wyyear.fact)
}
#Application of functions
snotel_allyears<-snotel_analysis(Snotel_2000_2022)
#Creating a usable data frame
snotel_metrics<-data.frame(wyyear=NA, peak_date=as.Date(NA), peakswe_mm=NA, time_of_melt=as.Date(NA), slope_melt=NA)
for (i in 1:length(snotel_allyears)) {
snotel_metrics$year[i]<-snotel_allyears[[i]]$waterYear[1]
peak_swe<- max(snotel_allyears[[i]]$swe)
snotel_metrics$peakswe_mm[i]<-peak_swe*25.4
snotel_metrics$peak_swe_in[i]<-peak_swe
date<-snotel_allyears[[i]][snotel_allyears[[i]]$swe == peak_swe,]$Date
snotel_metrics$peak_date[i]<- date[1]
time_of_full_melt = snotel_allyears[[i]][snotel_allyears[[i]]$month > 2 & snotel_allyears[[i]]$swe == 0,]$Date[1]
snotel_metrics$time_of_melt[i] <- time_of_full_melt
#Find mean slope from start to peak flow
snotel_metrics$slope_melt[i]<- (peak_swe - snotel_allyears[[i]][snotel_allyears[[i]]$Date == as.Date(time_of_full_melt), ]$swe)/
as.numeric(time_of_full_melt[1]- date[1])
#snotel_metrics$temp_avg[i] <- mean(c(snotel_ls[[i-1]][snotel_ls[[i -1]]$month > 11,]$temp_avg,
#snotel_ls[[i]][snotel_ls[[i]]$month > 1 & snotel_ls[[i]]$month < 4,]$temp_avg))
#snotel_metrics$temp_max_w[i] <- mean(c(snotel_ls[[i-1]][snotel_ls[[i -1]]$month > 11,]$temp_max,
#snotel_ls[[i]][snotel_ls[[i]]$month > 1 & snotel_ls[[i]]$month < 4,]$temp_max))
snotel_metrics$precip_max[i] <- snotel_ls[[i]][snotel_ls[[i]]$swe == peak_swe,]$precip_acc
snotel_metrics$swe_precip[i]<-snotel_ls[[i]]$swe/snotel_ls[[i]]$precip_acc
} #moving average mean slope is still not working
snotel_metrics
#Creating a usable data frame
snotel_metrics<-data.frame(time=1:23, wyyear=NA, peak_date=as.Date(NA), peakswe_mm=NA, time_of_melt=as.Date(NA), slope_melt=NA)
for (i in 1:length(snotel_allyears)) {
snotel_metrics$year[i]<-snotel_allyears[[i]]$waterYear[1]
peak_swe<- max(snotel_allyears[[i]]$swe)
snotel_metrics$peakswe_mm[i]<-peak_swe*25.4
snotel_metrics$peak_swe_in[i]<-peak_swe
date<-snotel_allyears[[i]][snotel_allyears[[i]]$swe == peak_swe,]$Date
snotel_metrics$peak_date[i]<- date[1]
time_of_full_melt = snotel_allyears[[i]][snotel_allyears[[i]]$month > 2 & snotel_allyears[[i]]$swe == 0,]$Date[1]
snotel_metrics$time_of_melt[i] <- time_of_full_melt
#Find mean slope from start to peak flow
snotel_metrics$slope_melt[i]<- (peak_swe - snotel_allyears[[i]][snotel_allyears[[i]]$Date == as.Date(time_of_full_melt), ]$swe)/
as.numeric(time_of_full_melt[1]- date[1])
#snotel_metrics$temp_avg[i] <- mean(c(snotel_ls[[i-1]][snotel_ls[[i -1]]$month > 11,]$temp_avg,
#snotel_ls[[i]][snotel_ls[[i]]$month > 1 & snotel_ls[[i]]$month < 4,]$temp_avg))
#snotel_metrics$temp_max_w[i] <- mean(c(snotel_ls[[i-1]][snotel_ls[[i -1]]$month > 11,]$temp_max,
#snotel_ls[[i]][snotel_ls[[i]]$month > 1 & snotel_ls[[i]]$month < 4,]$temp_max))
snotel_metrics$precip_max[i] <- snotel_ls[[i]][snotel_ls[[i]]$swe == peak_swe,]$precip_acc
snotel_metrics$swe_precip[i]<-snotel_ls[[i]]$swe/snotel_ls[[i]]$precip_acc
} #moving average mean slope is still not working
snotel_metrics
for (i in 1:length(snotel_allyears)) {
snotel_metrics$wyyear[i]<-snotel_allyears[[i]]$waterYear[1]
peak_swe<- max(snotel_allyears[[i]]$swe)
snotel_metrics$peakswe_mm[i]<-peak_swe*25.4
snotel_metrics$peak_swe_in[i]<-peak_swe
date<-snotel_allyears[[i]][snotel_allyears[[i]]$swe == peak_swe,]$Date
snotel_metrics$peak_date[i]<- date[1]
time_of_full_melt = snotel_allyears[[i]][snotel_allyears[[i]]$month > 2 & snotel_allyears[[i]]$swe == 0,]$Date[1]
snotel_metrics$time_of_melt[i] <- time_of_full_melt
#Find mean slope from start to peak flow
snotel_metrics$slope_melt[i]<- (peak_swe - snotel_allyears[[i]][snotel_allyears[[i]]$Date == as.Date(time_of_full_melt), ]$swe)/
as.numeric(time_of_full_melt[1]- date[1])
#snotel_metrics$temp_avg[i] <- mean(c(snotel_ls[[i-1]][snotel_ls[[i -1]]$month > 11,]$temp_avg,
#snotel_ls[[i]][snotel_ls[[i]]$month > 1 & snotel_ls[[i]]$month < 4,]$temp_avg))
#snotel_metrics$temp_max_w[i] <- mean(c(snotel_ls[[i-1]][snotel_ls[[i -1]]$month > 11,]$temp_max,
#snotel_ls[[i]][snotel_ls[[i]]$month > 1 & snotel_ls[[i]]$month < 4,]$temp_max))
snotel_metrics$precip_max[i] <- snotel_ls[[i]][snotel_ls[[i]]$swe == peak_swe,]$precip_acc
snotel_metrics$swe_precip[i]<-snotel_ls[[i]]$swe/snotel_ls[[i]]$precip_acc
} #moving average mean slope is still not working
snotel_metrics
plot(snotel_allyears[[1]]$Date, snotel_allyears[[1]]$swe)
snotel_allyears[[1]]
snotel_allyears[[2]]
plot(snotel_allyears[[2]]$Date, snotel_allyears[[2]]$swe, type = 'l')
for (j in 1:length(snotel_ls)) {
swe_diff.v <- numeric(length = 0)
#Snotel dry days after Oct 1 and before May 1: Snow Season
#This defines dry days as 0 accumulation
snotel_drydays<-snotel_ls[[j]][snotel_ls[[j]]$precip_inc == 0.0 & (snotel_ls[[j]]$month < 5 | snotel_ls[[j]]$month > 10), ]
#this splits up all the days that are consecutive to their own list object
drydaysls<-split(snotel_drydays$doy, cumsum(c(1, diff(snotel_drydays$doy) != 1)))
median_dry[j]<-median(lengths(drydaysls))
max_dry[j] <-max(lengths(drydaysls))
for (i in 1:length(drydaysls)){
if (length(drydaysls[[i]]) > 2 ){ # I would change this 2 to either median dry days for each year or max dry days
swe_diff.v[i] <- snotel_drydays[snotel_drydays$doy == min(drydaysls[[i]]),]$swe -
snotel_drydays[ snotel_drydays$doy == max(drydaysls[[i]]),]$swe
}
}
swe_diff[[j]]<-swe_diff.v
#names(swe_diff)<-2000:2022
}
swe_diff_mean<-as.data.frame(do.call(rbind, lapply(swe_diff, function(x) mean(na.omit(x)))))
setDT(swe_diff_mean, keep.rownames = "year")[]
swe_diff_mean$year<-as.numeric(swe_diff_mean$year)
colnames(swe_diff_mean)[2]<- "mean_swe_loss"
snotel_metrics<-full_join(snotel_metrics, swe_diff_mean, by= 'year')
snotel_metrics$median_dryd<-median_dry
snotel_metrics$max_dryd<-max_dry
snotel_metrics
swe_diff_mean
snotel_metrics<-data.frame(time=1:23, wyyear=NA, peak_date=as.Date(NA), peakswe_mm=NA, time_of_melt=as.Date(NA), slope_melt=NA)
for (i in 1:length(snotel_allyears)) {
snotel_metrics$wyyear[i]<-snotel_allyears[[i]]$waterYear[1]
peak_swe<- max(snotel_allyears[[i]]$swe)
snotel_metrics$peakswe_mm[i]<-peak_swe*25.4
snotel_metrics$peak_swe_in[i]<-peak_swe
date<-snotel_allyears[[i]][snotel_allyears[[i]]$swe == peak_swe,]$Date
snotel_metrics$peak_date[i]<- date[1]
time_of_full_melt = snotel_allyears[[i]][snotel_allyears[[i]]$month > 2 & snotel_allyears[[i]]$swe == 0,]$Date[1]
snotel_metrics$time_of_melt[i] <- time_of_full_melt
#Find mean slope from start to peak flow
snotel_metrics$slope_melt[i]<- (peak_swe - snotel_allyears[[i]][snotel_allyears[[i]]$Date == as.Date(time_of_full_melt), ]$swe)/
as.numeric(time_of_full_melt[1]- date[1])
#snotel_metrics$temp_avg[i] <- mean(c(snotel_ls[[i-1]][snotel_ls[[i -1]]$month > 11,]$temp_avg,
#snotel_ls[[i]][snotel_ls[[i]]$month > 1 & snotel_ls[[i]]$month < 4,]$temp_avg))
#snotel_metrics$temp_max_w[i] <- mean(c(snotel_ls[[i-1]][snotel_ls[[i -1]]$month > 11,]$temp_max,
#snotel_ls[[i]][snotel_ls[[i]]$month > 1 & snotel_ls[[i]]$month < 4,]$temp_max))
snotel_metrics$precip_max[i] <- snotel_ls[[i]][snotel_ls[[i]]$swe == peak_swe,]$precip_acc
#snotel_metrics$swe_precip[i]<-snotel_ls[[i]]$swe/snotel_ls[[i]]$precip_acc
} #moving average mean slope is still not working
snotel_metrics$peak_date<-as.Date(format(snotel_metrics$peak_date, format="%m-%d"), "%m-%d")
snotel_metrics$time_of_melt<-as.Date(format(snotel_metrics$time_of_melt, format="%m-%d"), "%m-%d")
length(snotel_allyears)
snotel_metrics
for (j in 1:length(snotel_allyears)) {
swe_diff.v <- numeric(length = 0)
#Snotel dry days after Oct 1 and before May 1: Snow Season
#This defines dry days as 0 accumulation
snotel_drydays<-snotel_ls[[j]][snotel_ls[[j]]$precip_inc == 0.0 & (snotel_ls[[j]]$month < 5 | snotel_ls[[j]]$month > 10), ]
#this splits up all the days that are consecutive to their own list object
drydaysls<-split(snotel_drydays$doy, cumsum(c(1, diff(snotel_drydays$doy) != 1)))
median_dry[j]<-median(lengths(drydaysls))
max_dry[j] <-max(lengths(drydaysls))
for (i in 1:length(drydaysls)){
if (length(drydaysls[[i]]) > 2 ){ # I would change this 2 to either median dry days for each year or max dry days
swe_diff.v[i] <- snotel_drydays[snotel_drydays$doy == min(drydaysls[[i]]),]$swe -
snotel_drydays[ snotel_drydays$doy == max(drydaysls[[i]]),]$swe
}
}
swe_diff[[j]]<-swe_diff.v
#names(swe_diff)<-2000:2022
}
swe_diff_mean<-as.data.frame(do.call(rbind, lapply(swe_diff, function(x) mean(na.omit(x)))))
swe_diff_mean
snotel_metrics$mean_swe_loss<-swe_diff_mean$V1
snotel_metrics$median_dryd<-median_dry
snotel_metrics$max_dryd<-max_dry
snotel_metrics$before_after_f<- as.factor(with(snotel_metrics, ifelse( year <= fire_year, 'prefire',
ifelse(year > fire_year & snotel_metrics$year <= fire_year+6, 'postfire_6yr',
'postfire'))))
snotel_metrics
snotel_metrics$before_after_f<- as.factor(with(snotel_metrics, ifelse( year <= fire_year, 'prefire',
ifelse(year > fire_year & snotel_metrics$year <= fire_year+6, 'postfire_6yr',
'postfire'))))
snotel_metrics$before_after_f<- as.factor(with(snotel_metrics, ifelse( wyyear <= fire_year, 'prefire',
ifelse(wyyear > fire_year & snotel_metrics$year <= fire_year+6, 'postfire_6yr',
'postfire'))))
boxplot(peak_date ~ before_after_f, data = snotel_metrics)
boxplot(peakswe_mm ~ before_after_f, data = snotel_metrics)
boxplot(slope_melt ~ before_after_f, data = snotel_metrics)
boxplot(time_of_melt ~ before_after_f, data = snotel_metrics)
ggplot(snotel_metrics %>% filter(!is.na(before_after_f)),
aes(x=before_after_f, y=swe_precip, fill=before_after_f)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="Dark2") +
xlab( "Pre or Post Fire") + ylab('midwintermelt loss') + ggtitle( "Snotel site")
snotel_metrics
snotel_metrics$before_after_f<- as.factor(with(snotel_metrics, ifelse( wyyear <= fire_year, 'prefire',
ifelse(wyyear > fire_year & snotel_metrics$year <= fire_year+6, 'postfire_6yr',
'postfire'))))
snotel_metrics$before_after_f<- as.factor(with(snotel_metrics, ifelse( wyyear <= fire_year, 'prefire',
ifelse(wyyear > fire_year & snotel_metrics$wyyear <= fire_year+6, 'postfire_6yr',
'postfire'))))
snotel_metrics
ggplot(snotel_metrics %>% filter(!is.na(before_after_f)),
aes(x=before_after_f, y=mean_swe_loss, fill=before_after_f)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="Dark2") +
xlab( "Pre or Post Fire") + ylab('midwintermelt loss') + ggtitle( "Snotel site")
ggplot(snotel_metrics %>% filter(!is.na(before_after_f)),
aes(x=before_after_f, y=mean_swe_loss, fill=before_after_f)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="Dark2") +
xlab( "Pre or Post Fire") + ylab('midwintermelt loss') + ggtitle( "Snotel site")
ggplot(snotel_metrics %>% filter(!is.na(before_after_f)),
aes(x=before_after_f, y=mean_swe_loss, fill=before_after_f)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="Dark2") +
xlab( "Pre or Post Fire") + ylab('midwintermelt loss') + ggtitle( "Snotel site")
ggplot(snotel_metrics %>% filter(!is.na(before_after_f)),
aes(x=before_after_f, y=max_dryd, fill=before_after_f)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="Dark2") +
xlab( "Pre or Post Fire") + ylab('midwintermelt loss') + ggtitle( "Snotel site")
###
###
###
library(terra)
SCFrast<- rast('/Volumes/MJ_INFEWS/Hannah Files/Fire_stream_flow/mean_SCF.tif')
SCFrast<- rast('/Volumes/MJ_INFEWS/Hannah Files/Fire_stream_flow/mean_SCF.tif')
SCFrast<- rast('/Volumes/MJ_INFEWS/Hannah Files/Fire_stream_flow/meanSCF.tif')
plot(SCFrast)
watershds <- vect('/Volumes/MJ_INFEWS/Hannah Files/Fire_stream_flow/watershed_firesnow.shp')
plot(SCFrast)
plot(watershds, add=T)
plot(watershds)
crs(watershds)
crs(watershds)
plot(watershds)
plot(SCFrast, add=T)
?as.polygons\
?as.polygons
as.polygons(SCFrast)
SCF.vect<-as.polygons(SCFrast)
plot(SCF.vect)
summary(watershds)
watershds[1]
crop.tst<-crop(SCF.vect, watershds[1])
plot(crop.tst)
crop.tst
crop.tst<-terra::intersect(SCF.vect, watershds[1])
crop.tst<-terra::intersect(SCF.vect, watershds[13])
crop.tst<-terra::intersect(SCF.vect, watershds[100])
length(watershds)
for (i in 1:length(watershds)) {
assign(paste0("GageID_",watershds$GAGE_ID[i]), terra::extract(SCFrast,watershds[i]))
}
View(GageID_10359300)
View(GageID_10359300)
plot(SCFrast)
summary(SCFrast)\
summary(SCFrast)
View(GageID_10384000)
View(GageID_10384000)
plot(crop(SCFrast,watershds[60]))
SCFrast<-project(SCFrast,watershds)
SCFrast<-project(SCFrast,crs(watershds))
plot(SCFrast)
plot(watershds, add=T)
for (i in 1:length(watershds)) {
assign(paste0("GageID_",watershds$GAGE_ID[i]), terra::extract(SCFrast,watershds[i]))
}
View(GageID_14400000)
watershed.df.ls<-mget(ls(pattern="GageID_")) #list of all data frames
watershed_SCF.tbl<-vector('list',length = length(watershed.df.ls)) #create list for for loop
system.time(
for (i in 1:length(watershed.df.ls)) {
watershed_SCF.tbl[[i]]<-table(watershed.df.ls[[i]]) #use data.table for faster processing
}
)
watershed_SCF.tbl
watershed_SCF.tbl[[1]]
watershed.df.ls[[1]]
plot(crop(SCFrast,watershds[1]))
plot(watershds[1],add=T)
hist(watershed.df.ls[[1]])
hist(watershed.df.ls[[1]]$meanSCF)
breaks<-c(0,0.25)
tags<-c('[0-25%)', '[25-100$)')
breaks.tst<-cut(watershed.df.ls[[1]]$meanSCF, breaks = breaks, include.lowest = T, right = F, labels = tags)
breaks.tst<-cut(watershed.df.ls[[1]]$meanSCF, breaks = breaks, include.lowest = T, right = T, labels = tags)
breaks<-c(0,0.25,1)
tags<-c('[0-25%)', '[25-100$)')
breaks.tst<-cut(watershed.df.ls[[1]]$meanSCF, breaks = breaks, include.lowest = T, right = F, labels = tags)
breaks.tst
breaks<-c(0,0.25,1)
tags<-c('no_snow', 'snow')
breaks.tst<-cut(watershed.df.ls[[1]]$meanSCF, breaks = breaks, include.lowest = T, right = F, labels = tags)
breaks.tst
breaks.tst[is.na(breaks.tst)]<-'no_snow'
breaks.tst
prop.table(breaks.tst)
breakT<-table(breaks.tst)
round(prop.table(breakT), digits = 2)
class(round(prop.table(breakT), digits = 2))
round(prop.table(breakT), digits = 2)[2]
watershed_prop<- data.frame(Gage_ID = NA, no_snow=NA, snow=NA)
breakT
percentage<-round(prop.table(breakT), digits = 2)
watershed_prop$no_snow[1]<-percentage[1]
for (i in 1:vector) {
}
watershed_prop
###
###
###
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))##set working directory to current rscript file
