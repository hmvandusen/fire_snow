albedo.df<- as.data.frame(year= levels(albedowshdtst$year.f), albedo_mean = albedo_mean)
albedo.df<- as.data.frame(year = levels(albedowshdtst$year.f), albedo_mean = albedo_mean)
?as.data.frame
albedo.df<- data.frame(year = levels(albedowshdtst$year.f), albedo_mean = albedo_mean)
plot(albedo.df$year, albedo.df$albedo_mean)
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
plot(albedo.df$year, a
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
abline(v = '2003')
mean(albedo.df$albedo_mean)
mean(albedo.df$albedo_mean[1:3])
mean(albedo.df$albedo_mean[4:6])
mean(albedo.df$albedo_mean[4:19])
plot(albedowshdtst$year, albedowshdtst$mean)
plot(albedowshdtst$date, albedowshdtst$mean)
plot(albedowshdtst$date, albedowshdtst$mean)
plot(albedowshdtst$date, albedowshdtst$mean, type='l')
plot(na.omit(albedowshdtst$date), na.omit(albedowshdtst$mean), type='l')
plot(as.Date(albedowshdtst$date), albedowshdtst$mean)
plot(as.Date(albedowshdtst$date), albedowshdtst$mean. type= ='l')
plot(as.Date(albedowshdtst$date), albedowshdtst$mean. type='l')
plot(as.Date(albedowshdtst$date), albedowshdtst$mean, type='l')
albedowshdtst$date
plot(as.Date(albedowshdtst$date), albedowshdtst$mean, type='l')
abline(v = as.Date('2003-08-13'))
plot(as.Date(albedowshdtst$date), albedowshdtst$mean, type='l')
abline(v = as.Date('2003-08-13'), col='red', lwd=3)
albedowshdtst <- read.csv("~/Downloads/albedowshdtst(2).csv")
albedowshdtst$month<-lubridate::month(albedowshdtst$date)
albedowshdtst$year<-lubridate::year(albedowshdtst$date)
albedowshdtst$year.f<-as.factor(albedowshdtst$year)
albedowshdtst$year_num<-as.numeric(albedowshdtst$year.f) # making year a number factor
albedo_wintersp <-albedowshdtst[albedowshdtst$month == 1  | albedowshdtst$month == 2   | albedowshdtst$month == 3,]
albedo_winterw <- albedowshdtst[albedowshdtst$month == 12,]
#is the mean of median the right value?
albedo_mean<-as.vector(1:max(albedowshdtst$year_num))
for (i in 1:(max(albedowshdtst$year_num))) {
albedo_mean[i]<-mean(c(albedo_wintersp[albedo_wintersp$year_num == i,]$mean, albedo_winterw[albedo_winterw$year_num == (i - 1),]$mean))
}
albedo.df<- data.frame(year = levels(albedowshdtst$year.f), albedo_mean = albedo_mean)
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
abline(v = '2003')
plot(as.Date(albedowshdtst$date), albedowshdtst$mean, type='l')
abline(v = as.Date('2003-08-13'), col='red', lwd=3)
albedowshdtst
albedowshdtst <- read.csv("~/Downloads/albedowshdtst(2).csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
albedowshdtst <- read.csv("~/Downloads/albedowshdtst(2).csv")
albedowshdtst <- read.csv("~/Downloads/albedowshdtst (2).csv")
albedowshdtst$month<-lubridate::month(albedowshdtst$date)
albedowshdtst$year<-lubridate::year(albedowshdtst$date)
albedowshdtst$year.f<-as.factor(albedowshdtst$year)
albedowshdtst$year_num<-as.numeric(albedowshdtst$year.f) # making year a number factor
albedo_wintersp <-albedowshdtst[albedowshdtst$month == 1  | albedowshdtst$month == 2   | albedowshdtst$month == 3,]
albedo_winterw <- albedowshdtst[albedowshdtst$month == 12,]
#is the mean of median the right value?
albedo_mean<-as.vector(1:max(albedowshdtst$year_num))
for (i in 1:(max(albedowshdtst$year_num))) {
albedo_mean[i]<-mean(c(albedo_wintersp[albedo_wintersp$year_num == i,]$mean, albedo_winterw[albedo_winterw$year_num == (i - 1),]$mean))
}
albedo.df<- data.frame(year = levels(albedowshdtst$year.f), albedo_mean = albedo_mean)
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
abline(v = '2003')
plot(as.Date(albedowshdtst$date), albedowshdtst$mean, type='l')
abline(v = as.Date('2003-08-13'), col='red', lwd=3)
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
abline(v = '2007')
plot(as.Date(albedowshdtst$date), albedowshdtst$mean, type='l')
abline(v = as.Date('2007-07-17'), col='red', lwd=3)
mean(albedo.df$albedo_mean[1:7])
mean(albedo.df$albedo_mean[8:19])
mean(albedo.df$albedo_mean[8:10])
albedowshdtst
albedo_wintersp
albedo_ablation<-albedowshdtst[albedowshdtst$month == 3  | albedowshdtst$month == 4   | albedowshdtst$month == 5,]
albedo_ablation
albedo.df<- data.frame(year = levels(albedowshdtst$year.f), albedo_mean = albedo_mean, abalation=NA)
for (i in 1:(max(albedowshdtst$year_num))) {
albedo.df$abalation[i]<-mean(albedo_ablation[albedo_ablation$year_num == i,]$mean)
}
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
abline(v = '2007', col ='red', lwd=3)
plot(albedo.df$year, albedo.df$abalation, type = 'l', add=T)
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
abline(v = '2007', col ='red', lwd=3)
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
abline(v = '2007', col ='red', lwd=3)
plot(albedo.df$year, albedo.df$abalation, type = 'l', add=T)
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
plot(albedo.df$year, albedo.df$abalation, type = 'l', add=T)
plot(albedo.df$year, albedo.df$abalation, type = 'l', add=T)
abline(v = '2007', col ='red', lwd=3)
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
plot(albedo.df$year, albedo.df$abalation, type = 'l', add=T)
abline(v = '2007.5', col ='red', lwd=3)
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l', ylim = c(30, 55))
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l', ylim = c(30, 55))
plot(albedo.df$year, albedo.df$abalation, type = 'l', add=T)
abline(v = '2007.5', col ='red', lwd=3)
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l', ylim = c(25, 60))
plot(albedo.df$year, albedo.df$abalation, type = 'l', add=T)
abline(v = '2007.5', col ='red', lwd=3)
albedo_mean<-as.vector(1:max(albedowshdtst$year_num))
for (i in 1:(max(albedowshdtst$year_num))) {
albedo_mean[i]<-median(c(albedo_wintersp[albedo_wintersp$year_num == i,]$mean, albedo_winterw[albedo_winterw$year_num == (i - 1),]$mean))
}
albedo.df<- data.frame(year = levels(albedowshdtst$year.f), albedo_mean = albedo_mean, abalation=NA)
for (i in 1:(max(albedowshdtst$year_num))) {
albedo.df$abalation[i]<-median(albedo_ablation[albedo_ablation$year_num == i,]$mean)
}
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
plot(albedo.df$year, albedo.df$abalation, type = 'l', add=T)
abline(v = '2007.5', col ='red', lwd=3)
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
abline(v = '2007.5', col ='red', lwd=3)
plot(albedo.df$year, albedo.df$abalation, type = 'l', add=T)
abline(v = '2007.5', col ='red', lwd=3)
albedowshdtst <- read.csv("~/Downloads/albedowshdtst.csv")
albedowshdtst$month<-lubridate::month(albedowshdtst$date)
albedowshdtst$year<-lubridate::year(albedowshdtst$date)
albedowshdtst$year.f<-as.factor(albedowshdtst$year)
albedowshdtst$year_num<-as.numeric(albedowshdtst$year.f) # making year a number factor
albedo_wintersp <-albedowshdtst[albedowshdtst$month == 1  | albedowshdtst$month == 2   | albedowshdtst$month == 3,]
albedo_winterw <- albedowshdtst[albedowshdtst$month == 12,]
albedo_ablation<-albedowshdtst[albedowshdtst$month == 3  | albedowshdtst$month == 4   | albedowshdtst$month == 5,]
#is the mean of median the right value?
albedo_mean<-as.vector(1:max(albedowshdtst$year_num))
for (i in 1:(max(albedowshdtst$year_num))) {
albedo_mean[i]<-median(c(albedo_wintersp[albedo_wintersp$year_num == i,]$mean, albedo_winterw[albedo_winterw$year_num == (i - 1),]$mean))
}
albedo.df<- data.frame(year = levels(albedowshdtst$year.f), albedo_mean = albedo_mean, abalation=NA)
for (i in 1:(max(albedowshdtst$year_num))) {
albedo.df$abalation[i]<-median(albedo_ablation[albedo_ablation$year_num == i,]$mean)
}
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
abline(v = '2003.5', col ='red', lwd=3)
plot(albedo.df$year, albedo.df$abalation, type = 'l', add=T)
abline(v = '2003.5', col ='red', lwd=3)
plot(as.Date(albedowshdtst$date), albedowshdtst$mean, type='l')
abline(v = as.Date('2007-07-17'), col='red', lwd=3)
plot(albedo.df$year, albedo.df$albedo_mean, type = 'l')
abline(v = '2003.5', col ='red', lwd=3)
plot(albedo.df$year, albedo.df$abalation, type = 'l', add=T)
abline(v = '2003.5', col ='red', lwd=3)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
forge_data <- read.csv("~/Desktop/UNR-EcoForecast-main/Forecasting_Challenge2/Forage Data - Sheet1.csv")
View(forge_data)
weather_data <- read.csv("~/Desktop/UNR-EcoForecast-main/Forecasting_Challenge2/weather data - PRISM_ppt_tmin_tmean_stable_4km_193501_201801_37.1019_-119.7324.csv")
View(weather_data)
plot(forge_data$year, forge_data$lbs_per_acre)
plot(forge_data$year, forge_data$lbs_per_acre, type='l')
summary(weather_data)
weather_data
##
##
##Forecasting Challenge 2: Forage Prediction
library(lubridate)
weather_data$year<-lubridate::year(weather_data$Date)
weather_data<-as_date(weather_data$Date, format = '%Y-%M')
weather_data <- read.csv("~/Desktop/UNR-EcoForecast-main/Forecasting_Challenge2/weather data - PRISM_ppt_tmin_tmean_stable_4km_193501_201801_37.1019_-119.7324.csv")
weather_data$Date2<-as_date(weather_data$Date, format = '%Y-%M')
weather_data
weather_data$year<-lubridate::year(weather_data$Date)
weather_data$year<-lubridate::year(weather_data$Date2)
weather_data$year
weather_data$month<-lubridate::month(weather_data$Date2)
weather_data
weather_data$Date2<-as_date(weather_data$Date)
weather_data$Date2<-as_date(weather_data$Date)
weather_data$Date2<-as.date(weather_data$Date)
weather_data$Date2<-as.Date(weather_data$Date)
?as.Date
weather_data$Date2<-as.Date(weather_data$Date, format = '%Y-%m')
weather_data
weather_data
weather_data$Date2<-as.Date(weather_data$Date, format = '%Y-%M')
weather_data
weather_data$Date2<-as.Date(weather_data$Date, format = '%Y-%m')
weather_data$Date2
weather_data
weather_data$Date2<-as_date(weather_data$Date, format = '%Y-%m')
weather_data
weather_data$Date2<-as_date(weather_data$Date)
weather_data <- read.csv("~/Desktop/UNR-EcoForecast-main/Forecasting_Challenge2/weather data - PRISM_ppt_tmin_tmean_stable_4km_193501_201801_37.1019_-119.7324.csv")
weather_data$Date2<-as_date(weather_data$Date)
a$Date2
weather_data
##
##
##Forecasting Challenge 2: Forage Prediction
install.packages('lubridate')
install.packages("lubridate")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
forge_data <- read.csv("~/Desktop/UNR-EcoForecast-main/Forecasting_Challenge2/Forage Data - Sheet1.csv")
weather_data <- read.csv("~/Desktop/UNR-EcoForecast-main/Forecasting_Challenge2/weather data - PRISM_ppt_tmin_tmean_stable_4km_193501_201801_37.1019_-119.7324.csv")
weather_data$Date2<-as_date(weather_data$Date)
library(lubridate)
weather_data$Date2<-as_date(weather_data$Date)
as.Date(weather_date)
as.Date(weather_data$Date)
as.character(weather_data$Date)
weather_data$Date2<-as_date(weather_data$Date)
weather_data$Date2<-as.Date(weather_data$Date, origin = '1935-01')
date<-as.numeric(as.character(weather_data$Date))
as.character(weather_data$Date)
-as.numeric(as.character(weather_data$Date))
class(weather_data$Date)
weather_data$Date2<-as.Date(weather_data$Date)
weather_data
forge_data <- read.csv("~/Desktop/UNR-EcoForecast-main/Forecasting_Challenge2/Forage Data - Sheet1.csv")
weather_data <- read.csv("~/Desktop/UNR-EcoForecast-main/Forecasting_Challenge2/weather data - PRISM_ppt_tmin_tmean_stable_4km_193501_201801_37.1019_-119.7324.csv")
as.Date(weather_data$Date)
View(weather_data)
View(weather_data)
forge<- read.csv("~/Desktop/UNR-EcoForecast-main/Forecasting_Challenge2/Forage Data - Sheet1.csv")
weather$Date <- ym(weather$Date)
forge<- read.csv("~/Desktop/UNR-EcoForecast-main/Forecasting_Challenge2/Forage Data - Sheet1.csv")
weather$Date <- ym(weather$Date)
forge<- read.csv("~/Desktop/UNR-EcoForecast-main/Forecasting_Challenge2/Forage Data - Sheet1.csv")
weather<- read.csv("~/Desktop/UNR-EcoForecast-main/Forecasting_Challenge2/weather data - PRISM_ppt_tmin_tmean_stable_4km_193501_201801_37.1019_-119.7324.csv")
weather$Date <- ym(weather$Date)
weather
weather$date2 <-  as_date(weather$Date)
str(weather$Date)
weather_dup <- weather                              # Duplicate data
weather_dup$year <- strftime(weather_dup$Date, "%Y")    # Create year column
weather_dup$month <- strftime(weather_dup$Date, "%m")   # Create month column
head(weather_dup)
class(month())
class(weather_dup$month)
weather$season = with(weather, ifelse(month %in% c("11",'12','01','02') ,'winter',
ifelse(month %in% c('03','04','05'), 'spring', ifelse(month %in% c('06','07','08'), 'summer',
'fall'))))
weather
weather$season <- with(weather, ifelse(month %in% c("11",'12','01','02') ,'winter',
ifelse(month %in% c('03','04','05'), 'spring', ifelse(month %in% c('06','07','08'), 'summer',
'fall'))))
weather_dup$season <- with(weather_dup, ifelse(month %in% c("11",'12','01','02') ,'winter',
ifelse(month %in% c('03','04','05'), 'spring', ifelse(month %in% c('06','07','08'), 'summer',
'fall'))))
head(weather_dup)
weather_dup$season <- with(weather_dup, ifelse(month %in% c("11",'12','01') ,'winter',
ifelse(month %in% c('02','03','04','05'), 'spring', ifelse(month %in% c('06','07','08'), 'summer',
'fall'))))
head(weather_dup)
weather_dup[weather_dup$season == 'winter', ]
weather_season.df<- data.frame(year=NA, wppt=NA, wtmean=NA, wtmin, fppt=NA, ftmean=NA, ftmin=NA)
weather_season.df<- data.frame(year=NA, wppt=NA, wtmean=NA, wtmin=NA, fppt=NA, ftmean=NA, ftmin=NA)
class(weather_dup$year)
as.factor(weather_dup$year)
class(weather_dup$year)
weather_dup$year<-as.factor(weather_dup$year)
weather_dup$year.num<-as.numeric(weather_dup$year)
head(weather_dup)
weather_dup[weather_dup$season == 'winter' & weather_dup$year.num == 1, ]
.6*.96
.6*.96+.4
.96-.4
(.96-.4)*1.6
(.964-.4)*1.6
knitr::opts_chunk$set(echo = TRUE)
#install.packages('dataRetrieval')
library(dataRetrieval) # packaage for downloading USGS stream flow data
#install.packages('lubridate')
library(lubridate) # date management
library(forecast)
library(stlplus)
library(fpp)
library(dplyr)
library(reshape2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Test 1:
#Fawn Creek Complex: Andrews Creek near Mazama
#Fire occurred:2003
#####
#Objects that change:: additional object to change and save product at bottom of script
# Pull in gage for fire identifying parameters for data download
siteNumber <- '12374250' # USGS gauge number
fire_year <- 2007
###Objects that do not change####
#window to plot in function: suggested window year 1 after fire
plot_date<- c("2021-01-01", "2021-12-31")
parameterCd <- "00060"  # mean daily discharge in cfs
startDate <- "2000-01-01" # period of record of MODIS
endDate <- "2021-12-31" # Current year
#### Cleaning in Gage data
# download data using readNWISdv function
streamflow_analysis<-function(siteNumber, parameterCd, startDate, endDate){
watershed_name <- dataRetrieval::readNWISdv(siteNumber, parameterCd, startDate, endDate)
head(watershed_name) # check
colnames(watershed_name)[4]<- 'discharge_cfs'
watershed_name<-watershed_name[,-5]
#Making time series in water year
#I am separating the date for each column
watershed_name$year <-lubridate::year(watershed_name$Date) # add year col
watershed_name$month <-lubridate::month(watershed_name$Date) # add month col
watershed_name$day <-lubridate::day(watershed_name$Date) # add day of month col
watershed_name$doy <-lubridate::yday(watershed_name$Date) # add day of year col
#Plots of all years from 2000 - 2021 and add in vertical line for fire
plot(watershed_name$Date, watershed_name$discharge_cfs, type='l', ylab='Discharge (cfs)', xlab='Time (days)')
abline(v=as.Date('2007-07-17'), col='red')
#Check for missing days, if so, add NA rows:
if(as.numeric(diff(range(watershed_name$Date))) != (nrow(watershed_name)+1)){
fullDates <- seq(from=min(watershed_name$Date),
to = max(watershed_name$Date), by="1 day")
fullDates <- data.frame(Date = fullDates,
agency_cd = watershed_name$agency_cd[1],
site_no = watershed_name$site_no[1],
stringsAsFactors = FALSE)
watershed_name <- full_join(watershed_name, fullDates,
by=c("Date","agency_cd","site_no")) %>%
arrange(Date)
}
watershed_name$year.fact<-as.factor(watershed_name$year)
watershed_ls<<-split(watershed_name, watershed_name$year.fact)
}
####
##function 2 for each year
###
eachyear<-function(yearperiod){
#This is calculating the 30 day running average. This is one sided instead of two
rollmean <- function(x,n=30){stats::filter(x,rep(1/n,n), sides=1)}
yearperiod$rollmean <- as.numeric(rollmean(yearperiod$discharge_cfs))
#This calculates 30 day moving average 15 days on both sides
ma30 <- function(x,n=30){stats::filter(x,rep(1/n,n), sides=2)}
yearperiod$ma30 <- as.numeric(ma30(yearperiod$discharge_cfs))
#Ploting 30-day rolling mean vs 30-day moving average
## Moving average is much sooner than the rolling average. This will provide you with a very different date
plot(yearperiod$Date,yearperiod$rollmean, type='l', col='red', xlim=as.Date(plot_date))
lines(yearperiod$Date, yearperiod$ma30)
##
##Painter et al. Rising Limb
#Running mean flow since 1 January
for (i in 1:dim(yearperiod)[1]) {
yearperiod$runmeanPainter[i]<-sum(yearperiod$discharge_cfs[1:i])/i
}
plot(yearperiod$Date,yearperiod$rollmean, type='l', col='red', xlim=as.Date(plot_date), ylim = c(0,5000))
lines(yearperiod$Date, yearperiod$ma30)
lines(yearperiod$Date, yearperiod$discharge_cfs, col='blue')
lines(yearperiod$Date, yearperiod$runmeanPainter, col='green')
##Find percent change of Painter running mean:
for (i in 2:dim(yearperiod)[1]) {
yearperiod$perchange[1]<-NA
yearperiod$perchange[i]<- ((yearperiod$runmeanPainter)[i]/yearperiod$runmeanPainter[i-1]*100)-100
}
plot(yearperiod$Date, yearperiod$perchange, type='l', col='red', xlim=as.Date(plot_date), ylim = c(0,20))
abline(h=1)
assign(paste0("watershed_", yearperiod$year[1]), yearperiod, envir = globalenv())
}
watershed_allyears<-streamflow_analysis(siteNumber, parameterCd, startDate, endDate)
watershed_allyears.ls<-lapply(watershed_allyears, function(y) eachyear(y))
streamflow_metrics<-data.frame(time= 1:22,year=NA, springonset_date=as.Date(NA), peakflow_cfs=NA, meanslope=NA, meanslope_ma=NA)
for (i in 1:length(watershed_allyears.ls)) {
streamflow_metrics$year[i]<-watershed_allyears.ls[[i]]$year[1]
date<-watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$perchange >= 1 & watershed_allyears.ls[[i]]$month > 2  ,]$Date[1]
streamflow_metrics$springonset_date[i]<- date[1]
peakflow<-max(watershed_allyears.ls[[i]]$discharge_cfs)
streamflow_metrics$peakflow_cms[i]<-peakflow*0.0283168
streamflow_metrics$peakflow_cfs[i]<-peakflow
#Find mean slope from start to peak flow
streamflow_metrics$meanslope[i]<- (peakflow - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == as.Date(date), ]$discharge_cfs)/
(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$discharge_cfs == peakflow, ]$doy - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == as.Date(date), ]$doy)
max_ma30<-max(watershed_allyears.ls[[i]]$ma30, na.rm=T)
streamflow_metrics$max_ma30[i]<-max_ma30
streamflow_metrics$meanslope_ma[i]<- (max_ma30 - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == date, ]$ma30)/(na.omit(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$ma30 == max_ma30, ]$doy) - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == as.Date(date), ]$doy)
streamflow_metrics$annual_tot[i]<-sum(watershed_allyears.ls[[i]]$discharge_cfs)*0.0283168
streamflow_metrics$annual_mean[i]<-mean(watershed_allyears.ls[[i]]$discharge_cfs)*0.0283168
} #moving average mean slope is still not working
plot(streamflow_metrics$year, streamflow_metrics$peakflow_cfs, type = "l", xlab="Time", ylab='Streamflow (cfs)')
abline(v= fire_year, col="red", lwd =3)
###SAVE streamflow_metrics table as a more specific name!####
#Example:
#MFrockCr_streamflow_metrics<-streamflow_metrics
#write.csv(MFrockCr_streamflow_metrics, "./streamflow_metrics/johnsoncreek_streamflow_metrics.csv")
##
##
##Plots for all Years
#Notes:
#Wrong year on springonset_md, but it don't matter for plotting purposes: just want month and day
#Red Post fire, Blue Pre-Fire
streamflow_metrics$springonset_md<-as.Date(format(streamflow_metrics$springonset_date, format="%m-%d"), "%m-%d")
plot(streamflow_metrics$springonset_md, streamflow_metrics$meanslope, col = ifelse(streamflow_metrics$year>fire_year, 'red','blue'),
pch=19,  xlab = "Day of spring onset", ylab="Mean hydrograph slope (cfs/day)", cex= 4)
plot(streamflow_metrics$peakflow_cfs, streamflow_metrics$meanslope, col = ifelse(streamflow_metrics$year>fire_year, 'red','blue'),
xlab = "Peak streamflow (cfs)", ylab="Mean hydrograph slope", pch = 19)
plot(streamflow_metrics$springonset_md, streamflow_metrics$peakflow_cfs, col = ifelse(streamflow_metrics$year>fire_year, 'red','blue'),
xlab = "Day of spring onset", ylab="Peak streamflow (cfs)", pch = 19, cex=4)
#Plots with gradient color
#Darker colors mean year closer to fire
library(RColorBrewer)
precols<-brewer.pal(4,"Blues")
postcols<-rev(brewer.pal(4,"Reds"))
prepal<-colorRampPalette(precols)
postpal<-colorRampPalette(postcols)
par(bg="white") # This series of code makes just plot back ground grey and outside white: for better contrast
plot(streamflow_metrics$springonset_md, streamflow_metrics$meanslope,
xlab = "Day of spring onset",
ylab="Mean hydrograph slope (cfs/day)")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey")
par(new = TRUE)
points(streamflow_metrics$springonset_md, streamflow_metrics$meanslope,
col = ifelse(streamflow_metrics$year>fire_year,
postpal(10)[as.numeric(cut(streamflow_metrics[streamflow_metrics$year>fire_year,]$year, breaks = 10))],
"turquoise3"),
pch=19, cex=2)
##gradient pre fire colors:: prepal(10)[as.numeric(cut(streamflow_metrics[streamflow_metrics$year<fire_year,]$year, breaks = 10))])
#Bar plot of mean hydro graph slope, colored by pre and post fire
streamflow_metrics_slopeordered<-streamflow_metrics[order(streamflow_metrics$meanslope, decreasing = T),]
barplot(streamflow_metrics_slopeordered$meanslope, breaks = 50, col = ifelse(streamflow_metrics_slopeordered$year>fire_year,
postpal(10)[as.numeric(cut(streamflow_metrics_slopeordered[streamflow_metrics_slopeordered$year>fire_year,]$year, breaks = 10))],
prepal(10)[as.numeric(cut(streamflow_metrics_slopeordered[streamflow_metrics_slopeordered$year<fire_year,]$year, breaks = 10))]),
xlab = "Mean slope")
#Table of top 6 years with the largest mean slope
head(streamflow_metrics_slopeordered)
#Barplot of top years
streamflow_metrics_3y<-streamflow_metrics[streamflow_metrics$year>(fire_year-4) & streamflow_metrics$year<(fire_year+4),]
barplot(streamflow_metrics_3y$springonset_date, breaks = 50, col = ifelse(streamflow_metrics_3y$year>fire_year,
postpal(3)[as.numeric(cut(streamflow_metrics_3y[streamflow_metrics_3y$year>fire_year,]$year, breaks = 3))],
prepal(4)[as.numeric(cut(streamflow_metrics_3y[streamflow_metrics_3y$year<fire_year,]$year, breaks = 4))]),
xlab = "Mean slope")
#Mean date of spring onset (mean slope is pretty much the same)
mean(na.omit(streamflow_metrics[streamflow_metrics$year <= fire_year,]$springonset_md))
mean(na.omit(streamflow_metrics[streamflow_metrics$year > fire_year & streamflow_metrics$year <= fire_year+3,]$springonset_md))
mean(na.omit(streamflow_metrics[streamflow_metrics$year <= fire_year,]$max_ma30))
mean(na.omit(streamflow_metrics[streamflow_metrics$year > fire_year & streamflow_metrics$year <= fire_year+3,]$max_ma30))
boxplot(na.omit(streamflow_metrics[streamflow_metrics$year > fire_year & streamflow_metrics$year <= fire_year+3,]$max_ma30))
boxplot(na.omit(streamflow_metrics[streamflow_metrics$year <= fire_year,]$max_ma30))
streamflow_metrics$before_after_f<- as.factor(with(streamflow_metrics, ifelse( year <= fire_year, 'prefire',
ifelse(year > fire_year & streamflow_metrics$year <= fire_year+3, 'postfire_3yr',
'postfire'))))
streamflow_metrics
?boxplot
boxplot(springonset_md ~ before_after_f, data = streamflow_metrics)
View(streamflow_metrics)
View(streamflow_metrics)
boxplot(meanslope ~ before_after_f, data = streamflow_metrics)
boxplot(meanslope ~ before_after_f, data = streamflow_metrics, ylim = c(0,7))
boxplot(meanslope_ma ~ before_after_f, data = streamflow_metrics)
boxplot(max_ma30 ~ before_after_f, data = streamflow_metrics)
boxplot(peakflow ~ before_after_f, data = streamflow_metrics)
boxplot(peakflow_cms ~ before_after_f, data = streamflow_metrics)
boxplot(springonset_md ~ before_after_f, data = streamflow_metrics)
ggplot(streamflow_metrics, aes(x=before_after_f, y=springonset_md, fill=class)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="Dark2")
library(ggplot2)
ggplot(streamflow_metrics, aes(x=before_after_f, y=springonset_md, fill=class)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="Dark2")
ggplot(streamflow_metrics, aes(x=before_after_f, y=springonset_md, fill=class)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="Dark2")
library(RColorBrewer)
ggplot(streamflow_metrics, aes(x=before_after_f, y=springonset_md, fill=class)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="Dark2")
ggplot(streamflow_metrics, aes(x=before_after_f, y=springonset_md, fill=class)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
ggplot(streamflow_metrics, aes(x=before_after_f, y=springonset_md, fill=class)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
ggplot(streamflow_metrics, aes(x=before_after_f, y=meanslope, fill=class)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
boxplot(peakflow_cms ~ before_after_f, data = streamflow_metrics)
p <- ggplot(streamflow_metrics, aes(x=before_after_f, y=meanslope, fill=names)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y=mean, geom="point", shape=20, size=14, color="red", fill="red") +
theme(legend.position="none") +
scale_fill_brewer(palette="Set1")
p
p <- ggplot(streamflow_metrics, aes(x=before_after_f, y=meanslope, fill=before_after_f)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y=mean, geom="point", shape=20, size=14, color="red", fill="red") +
theme(legend.position="none") +
scale_fill_brewer(palette="Set1")
p
p <- ggplot(streamflow_metrics, aes(x=before_after_f, y=meanslope, fill=before_after_f)) +
geom_boxplot(alpha=0.7) +
geom_violin()+
stat_summary(fun.y=mean, geom="point", shape=20, size=14, color="red", fill="red") +
theme(legend.position="none") +
scale_fill_brewer(palette="Set1")
p
boxplot(springonset_md ~ before_after_f, data = streamflow_metrics)
library(readr)
Snotel_Johnsoncreek <- read_csv("https://wcc.sc.egov.usda.gov/reportGenerator/view_csv/customSingleStationReport/daily/439:ID:SNTL%7Cid=%22%22%7Cname/POR_BEGIN,POR_END/WTEQ::value,PREC::value,TMAX::value,TMIN::value,TAVG::value,PRCP::value",
comment = "#")
View(Snotel_Johnsoncreek)
Snotel_Johnsoncreek$`Snow Water Equivalent (in) Start of Day Values`
#Precip starts on the 576 data entry
Snotel_Johnsoncreek$`Precipitation Accumulation (in) Start of Day Values`
dim(Snotel_Johnsoncreek)
n<-dim(Snotel_Johnsoncreek)[1]
Snotel_JC<-Snotel_Johnsoncreek[576:n,]
head(Snotel_JC)
tail(Snotel_JC)
Snotel_2000_2022<-Snotel_JC[Snotel_JC$Date >= '2000-01-01',]
head(Snotel_2000_2022)
plot(Snotel_2000_2022$`Snow Water Equivalent (in) Start of Day Values`)
plot(Snotel_2000_2022$`Snow Water Equivalent (in) Start of Day Values`, type='l')
plot(Snotel_2000_2022$Date,Snotel_2000_2022$`Snow Water Equivalent (in) Start of Day Values`, type='l')
fire_year
plot(Snotel_2000_2022$Date,Snotel_2000_2022$`Snow Water Equivalent (in) Start of Day Values`, type='l')
abline(v=as.Date('2007-07-17'), col='red')
