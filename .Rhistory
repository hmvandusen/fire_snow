fire_year <- watershdfire.df$year[gage]
#window to plot in function: suggested window year 1 after fire
plot_date<- c("2021-01-01", "2021-12-31")
parameterCd <- "00060"  # mean daily discharge in cfs
startDate <- "2000-01-01" # period of record of MODIS
endDate <- "2021-12-31" # Current year
#### Cleaning in Gage data
# download data using readNWISdv function
streamflow_analysis<-function(siteNumber, parameterCd, startDate, endDate){
watershed_name <- dataRetrieval::readNWISdv(siteNumber, parameterCd, startDate, endDate)
head(watershed_name) # check
colnames(watershed_name)[4]<- 'discharge_cfs'
watershed_name<-watershed_name[,-5]
#Making time series in water year
#I am separating the date for each column
watershed_name$year <-lubridate::year(watershed_name$Date) # add year col
watershed_name$month <-lubridate::month(watershed_name$Date) # add month col
watershed_name$day <-lubridate::day(watershed_name$Date) # add day of month col
watershed_name$doy <-lubridate::yday(watershed_name$Date) # add day of year col
watershed_name<-addWaterYear(watershed_name)
#Plots of all years from 2000 - 2021 and add in vertical line for fire
#plot(watershed_name$Date, watershed_name$discharge_cfs, type='l', ylab='Discharge (cfs)', xlab='Time (days)')
#abline(v=as.Date(fire_year), col='red')
#Check for missing days, if so, add NA rows:
if(as.numeric(diff(range(watershed_name$Date))) != (nrow(watershed_name)+1)){
fullDates <- seq(from=min(watershed_name$Date),
to = max(watershed_name$Date), by="1 day")
fullDates <- data.frame(Date = fullDates,
agency_cd = watershed_name$agency_cd[1],
site_no = watershed_name$site_no[1],
stringsAsFactors = FALSE)
watershed_name <- full_join(watershed_name, fullDates,
by=c("Date","agency_cd","site_no")) %>%
arrange(Date)
}
watershed_name$year.fact<-as.factor(watershed_name$year)
watershed_ls<<-split(watershed_name, watershed_name$year.fact)
}
####
##function 2 for each year
###
eachyear<-function(yearperiod){
#This is calculating the 30 day running average. This is one sided instead of two
rollmean <- function(x,n=30){stats::filter(x,rep(1/n,n), sides=1)}
yearperiod$rollmean <- as.numeric(rollmean(yearperiod$discharge_cfs))
#This calculates 30 day moving average 15 days on both sides
ma30 <- function(x,n=30){stats::filter(x,rep(1/n,n), sides=2)}
yearperiod$ma30 <- as.numeric(ma30(yearperiod$discharge_cfs))
#Ploting 30-day rolling mean vs 30-day moving average
## Moving average is much sooner than the rolling average. This will provide you with a very different date
plot(yearperiod$Date,yearperiod$rollmean, type='l', col='red', xlim=as.Date(plot_date))
lines(yearperiod$Date, yearperiod$ma30)
##
##Painter et al. Rising Limb
#Running mean flow since 1 January
for (i in 1:dim(yearperiod)[1]) {
yearperiod$runmeanPainter[i]<-sum(yearperiod$discharge_cfs[1:i])/i
}
plot(yearperiod$Date,yearperiod$rollmean, type='l', col='red', xlim=as.Date(plot_date), ylim = c(0,5000))
lines(yearperiod$Date, yearperiod$ma30)
lines(yearperiod$Date, yearperiod$discharge_cfs, col='blue')
lines(yearperiod$Date, yearperiod$runmeanPainter, col='green')
##Find percent change of Painter running mean:
for (i in 2:dim(yearperiod)[1]) {
yearperiod$perchange[1]<-NA
yearperiod$perchange[i]<- ((yearperiod$runmeanPainter)[i]/yearperiod$runmeanPainter[i-1]*100)-100
}
plot(yearperiod$Date, yearperiod$perchange, type='l', col='red', xlim=as.Date(plot_date), ylim = c(0,20))
abline(h=1)
assign(paste0("watershed_", yearperiod$year[1]), yearperiod, envir = globalenv())
}
###Application of functions
watershed_allyears<-streamflow_analysis(siteNumber, parameterCd, startDate, endDate)
watershed_allyears.ls<-lapply(watershed_allyears, function(y) eachyear(y))
#Creating a usable dataframe and following for loop
streamflow_metrics<-data.frame(time= 1:22,year=NA, springonset_date=as.Date(NA), peakflow_cfs=NA, meanslope=NA, meanslope_ma=NA)
for (i in 1:length(watershed_allyears.ls)) {
streamflow_metrics$year[i]<-watershed_allyears.ls[[i]]$year[1]
date<-na.omit(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$perchange >= 1 & watershed_allyears.ls[[i]]$month > 2  ,])$Date[1]
streamflow_metrics$springonset_date[i]<- date[1]
peakflow<-max(watershed_allyears.ls[[i]]$discharge_cfs)
streamflow_metrics$peakflow_cms[i]<-peakflow*0.0283168
streamflow_metrics$peakflow_cfs[i]<-peakflow
#Find mean slope from start to peak flow
streamflow_metrics$meanslope[i]<- (peakflow - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == as.Date(date), ]$discharge_cfs)/
(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$discharge_cfs == peakflow, ]$doy - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == as.Date(date), ]$doy)
max_ma30<-max(watershed_allyears.ls[[i]]$ma30, na.rm=T)
streamflow_metrics$max_ma30[i]<-max_ma30
streamflow_metrics$meanslope_ma[i]<- (max_ma30 - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == date, ]$ma30)/(na.omit(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$ma30 == max_ma30, ]$doy) - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == as.Date(date), ]$doy)
streamflow_metrics$annual_tot[i]<-sum(watershed_allyears.ls[[i]]$discharge_cfs)*0.0283168
streamflow_metrics$annual_mean[i]<-mean(watershed_allyears.ls[[i]]$discharge_cfs)*0.0283168
streamflow_metrics$annual_mean[i]<-mean(watershed_allyears.ls[[i]]$discharge_cfs)*0.0283168
streamflow_metrics$baseflow[i]<-median(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$month == 8,]$discharge_cfs)*0.0283168
} #moving average mean slope is still not working
streamflow_metrics$before_after_f<- as.factor(with(streamflow_metrics, ifelse( year <= fire_year, 'prefire',
ifelse(year > fire_year & streamflow_metrics$year <= fire_year+3, 'postfire_3yr',
'postfire'))))
streamflow_metrics$springonset_md<-as.Date(format(streamflow_metrics$springonset_date, format="%m-%d"), "%m-%d")
streamflow_metrics$GAGE_ID <- siteNumber
streamflow_metrics$fire_year <- fire_year
streamflow_metrics$snow <- watershdfire.df$snow[gage]
streamflow_metrics$percentageFire <- watershdfire.df$percentageFire[gage]
streamflow_metrics$Hseverity <- watershdfire.df$Hseverity[gage]
streamflow_metrics.ls[[gage]]<- streamflow_metrics
rm(list=ls(pattern="watershed_"))},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
conditionMessage(e)
knitr::opts_chunk$set(echo = TRUE)
#install.packages('dataRetrieval')
library(dataRetrieval) # packaage for downloading USGS stream flow data
#install.packages('lubridate')
library(lubridate) # date management
library(forecast)
library(stlplus)
library(fpp)
library(dplyr)
library(reshape2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Test 1:
#Fawn Creek Complex: Andrews Creek near Mazama
#Fire occurred:2003
#####
#Objects that change:: additional object to change and save product at bottom of script
watershdfire.df <- read.table('/Volumes/MJ_INFEWS/Hannah Files/Fire_stream_flow/whole_watershedfire.txt', sep=',', header = T)
#adding leading 0 to ID values that are less than 8 digets
watershdfire.df$GAGE_ID<-ifelse(floor(log10(watershdfire.df$GAGE_ID)) + 1 < 8, paste0("0", watershdfire.df$GAGE_ID), watershdfire.df$GAGE_ID)
#create a list for stream metrics dataframe
streamflow_metrics.ls<-list(NA)
for (gage in 1:dim(watershdfire.df)[1]) { #dim(watershdfire.df)[1]
tryCatch({
# Pull in gage for fire identifying parameters for data download
siteNumber <- watershdfire.df$GAGE_ID[gage] # USGS gauge number
fire_year <- watershdfire.df$year[gage]
#window to plot in function: suggested window year 1 after fire
plot_date<- c("2021-01-01", "2021-12-31")
parameterCd <- "00060"  # mean daily discharge in cfs
startDate <- "2000-01-01" # period of record of MODIS
endDate <- "2021-12-31" # Current year
#### Cleaning in Gage data
# download data using readNWISdv function
streamflow_analysis<-function(siteNumber, parameterCd, startDate, endDate){
watershed_name <- dataRetrieval::readNWISdv(siteNumber, parameterCd, startDate, endDate)
head(watershed_name) # check
colnames(watershed_name)[4]<- 'discharge_cfs'
watershed_name<-watershed_name[,-5]
#Making time series in water year
#I am separating the date for each column
watershed_name$year <-lubridate::year(watershed_name$Date) # add year col
watershed_name$month <-lubridate::month(watershed_name$Date) # add month col
watershed_name$day <-lubridate::day(watershed_name$Date) # add day of month col
watershed_name$doy <-lubridate::yday(watershed_name$Date) # add day of year col
watershed_name<-addWaterYear(watershed_name)
#Plots of all years from 2000 - 2021 and add in vertical line for fire
#plot(watershed_name$Date, watershed_name$discharge_cfs, type='l', ylab='Discharge (cfs)', xlab='Time (days)')
#abline(v=as.Date(fire_year), col='red')
#Check for missing days, if so, add NA rows:
if(as.numeric(diff(range(watershed_name$Date))) != (nrow(watershed_name)+1)){
fullDates <- seq(from=min(watershed_name$Date),
to = max(watershed_name$Date), by="1 day")
fullDates <- data.frame(Date = fullDates,
agency_cd = watershed_name$agency_cd[1],
site_no = watershed_name$site_no[1],
stringsAsFactors = FALSE)
watershed_name <- full_join(watershed_name, fullDates,
by=c("Date","agency_cd","site_no")) %>%
arrange(Date)
}
watershed_name$year.fact<-as.factor(watershed_name$year)
watershed_ls<<-split(watershed_name, watershed_name$year.fact)
}
####
##function 2 for each year
###
eachyear<-function(yearperiod){
#This is calculating the 30 day running average. This is one sided instead of two
rollmean <- function(x,n=30){stats::filter(x,rep(1/n,n), sides=1)}
yearperiod$rollmean <- as.numeric(rollmean(yearperiod$discharge_cfs))
#This calculates 30 day moving average 15 days on both sides
ma30 <- function(x,n=30){stats::filter(x,rep(1/n,n), sides=2)}
yearperiod$ma30 <- as.numeric(ma30(yearperiod$discharge_cfs))
#Ploting 30-day rolling mean vs 30-day moving average
## Moving average is much sooner than the rolling average. This will provide you with a very different date
plot(yearperiod$Date,yearperiod$rollmean, type='l', col='red', xlim=as.Date(plot_date))
lines(yearperiod$Date, yearperiod$ma30)
##
##Painter et al. Rising Limb
#Running mean flow since 1 January
for (i in 1:dim(yearperiod)[1]) {
yearperiod$runmeanPainter[i]<-sum(yearperiod$discharge_cfs[1:i])/i
}
plot(yearperiod$Date,yearperiod$rollmean, type='l', col='red', xlim=as.Date(plot_date), ylim = c(0,5000))
lines(yearperiod$Date, yearperiod$ma30)
lines(yearperiod$Date, yearperiod$discharge_cfs, col='blue')
lines(yearperiod$Date, yearperiod$runmeanPainter, col='green')
##Find percent change of Painter running mean:
for (i in 2:dim(yearperiod)[1]) {
yearperiod$perchange[1]<-NA
yearperiod$perchange[i]<- ((yearperiod$runmeanPainter)[i]/yearperiod$runmeanPainter[i-1]*100)-100
}
plot(yearperiod$Date, yearperiod$perchange, type='l', col='red', xlim=as.Date(plot_date), ylim = c(0,20))
abline(h=1)
assign(paste0("watershed_", yearperiod$year[1]), yearperiod, envir = globalenv())
}
###Application of functions
watershed_allyears<-streamflow_analysis(siteNumber, parameterCd, startDate, endDate)
watershed_allyears.ls<-lapply(watershed_allyears, function(y) eachyear(y))
#Creating a usable dataframe and following for loop
streamflow_metrics<-data.frame(time= 1:22,year=NA, springonset_date=as.Date(NA), peakflow_cfs=NA, meanslope=NA, meanslope_ma=NA)
for (i in 1:length(watershed_allyears.ls)) {
streamflow_metrics$year[i]<-watershed_allyears.ls[[i]]$year[1]
date<-na.omit(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$perchange >= 1 & watershed_allyears.ls[[i]]$month > 2  ,])$Date[1]
streamflow_metrics$springonset_date[i]<- date[1]
peakflow<-max(watershed_allyears.ls[[i]]$discharge_cfs)
streamflow_metrics$peakflow_cms[i]<-peakflow*0.0283168
streamflow_metrics$peakflow_cfs[i]<-peakflow
#Find mean slope from start to peak flow
streamflow_metrics$meanslope[i]<- (peakflow - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == as.Date(date), ]$discharge_cfs)/
(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$discharge_cfs == peakflow, ]$doy - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == as.Date(date), ]$doy)
max_ma30<-max(watershed_allyears.ls[[i]]$ma30, na.rm=T)
streamflow_metrics$max_ma30[i]<-max_ma30
streamflow_metrics$meanslope_ma[i]<- (max_ma30 - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == date, ]$ma30)/(na.omit(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$ma30 == max_ma30, ]$doy) - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == as.Date(date), ]$doy)
streamflow_metrics$annual_tot[i]<-sum(watershed_allyears.ls[[i]]$discharge_cfs)*0.0283168
streamflow_metrics$annual_mean[i]<-mean(watershed_allyears.ls[[i]]$discharge_cfs)*0.0283168
streamflow_metrics$annual_mean[i]<-mean(watershed_allyears.ls[[i]]$discharge_cfs)*0.0283168
streamflow_metrics$baseflow[i]<-median(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$month == 8,]$discharge_cfs)*0.0283168
} #moving average mean slope is still not working
streamflow_metrics$before_after_f<- as.factor(with(streamflow_metrics, ifelse( year <= fire_year, 'prefire',
ifelse(year > fire_year & streamflow_metrics$year <= fire_year+3, 'postfire_3yr',
'postfire'))))
streamflow_metrics$springonset_md<-as.Date(format(streamflow_metrics$springonset_date, format="%m-%d"), "%m-%d")
streamflow_metrics$GAGE_ID <- siteNumber
streamflow_metrics$fire_year <- fire_year
streamflow_metrics$snow <- watershdfire.df$snow[gage]
streamflow_metrics$percentageFire <- watershdfire.df$percentageFire[gage]
streamflow_metrics$Hseverity <- watershdfire.df$Hseverity[gage]
streamflow_metrics.ls[[gage]]<- streamflow_metrics
rm(list=ls(pattern="watershed_"))},
error = function(e){
message(paste("An error occurred for item", i, conditionMessage(e),":\n"), e)})
}
knitr::opts_chunk$set(echo = TRUE)
#install.packages('dataRetrieval')
library(dataRetrieval) # packaage for downloading USGS stream flow data
#install.packages('lubridate')
library(lubridate) # date management
library(forecast)
library(stlplus)
library(fpp)
library(dplyr)
library(reshape2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Test 1:
#Fawn Creek Complex: Andrews Creek near Mazama
#Fire occurred:2003
#####
#Objects that change:: additional object to change and save product at bottom of script
watershdfire.df <- read.table('/Volumes/MJ_INFEWS/Hannah Files/Fire_stream_flow/whole_watershedfire.txt', sep=',', header = T)
#adding leading 0 to ID values that are less than 8 digets
watershdfire.df$GAGE_ID<-ifelse(floor(log10(watershdfire.df$GAGE_ID)) + 1 < 8, paste0("0", watershdfire.df$GAGE_ID), watershdfire.df$GAGE_ID)
#create a list for stream metrics dataframe
streamflow_metrics.ls<-list(NA)
for (gage in 1:dim(watershdfire.df)[1]) { #dim(watershdfire.df)[1]
tryCatch({
# Pull in gage for fire identifying parameters for data download
siteNumber <- watershdfire.df$GAGE_ID[gage] # USGS gauge number
fire_year <- watershdfire.df$year[gage]
#window to plot in function: suggested window year 1 after fire
plot_date<- c("2021-01-01", "2021-12-31")
parameterCd <- "00060"  # mean daily discharge in cfs
startDate <- "2000-01-01" # period of record of MODIS
endDate <- "2021-12-31" # Current year
#### Cleaning in Gage data
# download data using readNWISdv function
streamflow_analysis<-function(siteNumber, parameterCd, startDate, endDate){
watershed_name <- dataRetrieval::readNWISdv(siteNumber, parameterCd, startDate, endDate)
head(watershed_name) # check
colnames(watershed_name)[4]<- 'discharge_cfs'
watershed_name<-watershed_name[,-5]
#Making time series in water year
#I am separating the date for each column
watershed_name$year <-lubridate::year(watershed_name$Date) # add year col
watershed_name$month <-lubridate::month(watershed_name$Date) # add month col
watershed_name$day <-lubridate::day(watershed_name$Date) # add day of month col
watershed_name$doy <-lubridate::yday(watershed_name$Date) # add day of year col
watershed_name<-addWaterYear(watershed_name)
#Plots of all years from 2000 - 2021 and add in vertical line for fire
#plot(watershed_name$Date, watershed_name$discharge_cfs, type='l', ylab='Discharge (cfs)', xlab='Time (days)')
#abline(v=as.Date(fire_year), col='red')
#Check for missing days, if so, add NA rows:
if(as.numeric(diff(range(watershed_name$Date))) != (nrow(watershed_name)+1)){
fullDates <- seq(from=min(watershed_name$Date),
to = max(watershed_name$Date), by="1 day")
fullDates <- data.frame(Date = fullDates,
agency_cd = watershed_name$agency_cd[1],
site_no = watershed_name$site_no[1],
stringsAsFactors = FALSE)
watershed_name <- full_join(watershed_name, fullDates,
by=c("Date","agency_cd","site_no")) %>%
arrange(Date)
}
watershed_name$year.fact<-as.factor(watershed_name$year)
watershed_ls<<-split(watershed_name, watershed_name$year.fact)
}
####
##function 2 for each year
###
eachyear<-function(yearperiod){
#This is calculating the 30 day running average. This is one sided instead of two
rollmean <- function(x,n=30){stats::filter(x,rep(1/n,n), sides=1)}
yearperiod$rollmean <- as.numeric(rollmean(yearperiod$discharge_cfs))
#This calculates 30 day moving average 15 days on both sides
ma30 <- function(x,n=30){stats::filter(x,rep(1/n,n), sides=2)}
yearperiod$ma30 <- as.numeric(ma30(yearperiod$discharge_cfs))
#Ploting 30-day rolling mean vs 30-day moving average
## Moving average is much sooner than the rolling average. This will provide you with a very different date
plot(yearperiod$Date,yearperiod$rollmean, type='l', col='red', xlim=as.Date(plot_date))
lines(yearperiod$Date, yearperiod$ma30)
##
##Painter et al. Rising Limb
#Running mean flow since 1 January
for (i in 1:dim(yearperiod)[1]) {
yearperiod$runmeanPainter[i]<-sum(yearperiod$discharge_cfs[1:i])/i
}
plot(yearperiod$Date,yearperiod$rollmean, type='l', col='red', xlim=as.Date(plot_date), ylim = c(0,5000))
lines(yearperiod$Date, yearperiod$ma30)
lines(yearperiod$Date, yearperiod$discharge_cfs, col='blue')
lines(yearperiod$Date, yearperiod$runmeanPainter, col='green')
##Find percent change of Painter running mean:
for (i in 2:dim(yearperiod)[1]) {
yearperiod$perchange[1]<-NA
yearperiod$perchange[i]<- ((yearperiod$runmeanPainter)[i]/yearperiod$runmeanPainter[i-1]*100)-100
}
plot(yearperiod$Date, yearperiod$perchange, type='l', col='red', xlim=as.Date(plot_date), ylim = c(0,20))
abline(h=1)
assign(paste0("watershed_", yearperiod$year[1]), yearperiod, envir = globalenv())
}
###Application of functions
watershed_allyears<-streamflow_analysis(siteNumber, parameterCd, startDate, endDate)
watershed_allyears.ls<-lapply(watershed_allyears, function(y) eachyear(y))
#Creating a usable dataframe and following for loop
streamflow_metrics<-data.frame(time= 1:22,year=NA, springonset_date=as.Date(NA), peakflow_cfs=NA, meanslope=NA, meanslope_ma=NA)
for (i in 1:length(watershed_allyears.ls)) {
streamflow_metrics$year[i]<-watershed_allyears.ls[[i]]$year[1]
date<-na.omit(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$perchange >= 1 & watershed_allyears.ls[[i]]$month > 2  ,])$Date[1]
streamflow_metrics$springonset_date[i]<- date[1]
peakflow<-max(watershed_allyears.ls[[i]]$discharge_cfs)
streamflow_metrics$peakflow_cms[i]<-peakflow*0.0283168
streamflow_metrics$peakflow_cfs[i]<-peakflow
#Find mean slope from start to peak flow
streamflow_metrics$meanslope[i]<- (peakflow - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == as.Date(date), ]$discharge_cfs)/
(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$discharge_cfs == peakflow, ]$doy - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == as.Date(date), ]$doy)
max_ma30<-max(watershed_allyears.ls[[i]]$ma30, na.rm=T)
streamflow_metrics$max_ma30[i]<-max_ma30
streamflow_metrics$meanslope_ma[i]<- (max_ma30 - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == date, ]$ma30)/(na.omit(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$ma30 == max_ma30, ]$doy) - watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$Date == as.Date(date), ]$doy)
streamflow_metrics$annual_tot[i]<-sum(watershed_allyears.ls[[i]]$discharge_cfs)*0.0283168
streamflow_metrics$annual_mean[i]<-mean(watershed_allyears.ls[[i]]$discharge_cfs)*0.0283168
streamflow_metrics$annual_mean[i]<-mean(watershed_allyears.ls[[i]]$discharge_cfs)*0.0283168
streamflow_metrics$baseflow[i]<-median(watershed_allyears.ls[[i]][watershed_allyears.ls[[i]]$month == 8,]$discharge_cfs)*0.0283168
} #moving average mean slope is still not working
streamflow_metrics$before_after_f<- as.factor(with(streamflow_metrics, ifelse( year <= fire_year, 'prefire',
ifelse(year > fire_year & streamflow_metrics$year <= fire_year+3, 'postfire_3yr',
'postfire'))))
streamflow_metrics$springonset_md<-as.Date(format(streamflow_metrics$springonset_date, format="%m-%d"), "%m-%d")
streamflow_metrics$GAGE_ID <- siteNumber
streamflow_metrics$fire_year <- fire_year
streamflow_metrics$snow <- watershdfire.df$snow[gage]
streamflow_metrics$percentageFire <- watershdfire.df$percentageFire[gage]
streamflow_metrics$Hseverity <- watershdfire.df$Hseverity[gage]
streamflow_metrics.ls[[gage]]<- streamflow_metrics
rm(list=ls(pattern="watershed_"))},
error = function(e){
message(paste("An error occurred for item", gage, conditionMessage(e),":\n"), e)})
}
head(streamflow_metrics.ls)
lengths(streamflow_metrics.ls)
lengths(streamflow_metrics.ls) == 0
sum(lengths(streamflow_metrics.ls) == 0)
streamflow_analysis<-function(siteNumber, parameterCd, startDate, endDate){
watershed_name <- dataRetrieval::readNWISdv(siteNumber, parameterCd, startDate, endDate)
head(watershed_name) # check
colnames(watershed_name)[4]<- 'discharge_cfs'
watershed_name<-watershed_name[,-5]
#Making time series in water year
#I am separating the date for each column
watershed_name$year <-lubridate::year(watershed_name$Date) # add year col
watershed_name$month <-lubridate::month(watershed_name$Date) # add month col
watershed_name$day <-lubridate::day(watershed_name$Date) # add day of month col
watershed_name$doy <-lubridate::yday(watershed_name$Date) # add day of year col
watershed_name<-addWaterYear(watershed_name)
#Plots of all years from 2000 - 2021 and add in vertical line for fire
#plot(watershed_name$Date, watershed_name$discharge_cfs, type='l', ylab='Discharge (cfs)', xlab='Time (days)')
#abline(v=as.Date(fire_year), col='red')
#Check for missing days, if so, add NA rows:
if(as.numeric(diff(range(watershed_name$Date))) != (nrow(watershed_name)+1)){
fullDates <- seq(from=min(watershed_name$Date),
to = max(watershed_name$Date), by="1 day")
fullDates <- data.frame(Date = fullDates,
agency_cd = watershed_name$agency_cd[1],
site_no = watershed_name$site_no[1],
stringsAsFactors = FALSE)
watershed_name <- full_join(watershed_name, fullDates,
by=c("Date","agency_cd","site_no")) %>%
arrange(Date)
}
watershed_name$year.fact<-as.factor(watershed_name$year)
watershed_ls<<-split(watershed_name, watershed_name$year.fact)
}
####
##function 2 for each year
###
eachyear<-function(yearperiod){
#This is calculating the 30 day running average. This is one sided instead of two
rollmean <- function(x,n=30){stats::filter(x,rep(1/n,n), sides=1)}
yearperiod$rollmean <- as.numeric(rollmean(yearperiod$discharge_cfs))
#This calculates 30 day moving average 15 days on both sides
ma30 <- function(x,n=30){stats::filter(x,rep(1/n,n), sides=2)}
yearperiod$ma30 <- as.numeric(ma30(yearperiod$discharge_cfs))
#Ploting 30-day rolling mean vs 30-day moving average
## Moving average is much sooner than the rolling average. This will provide you with a very different date
plot(yearperiod$Date,yearperiod$rollmean, type='l', col='red', xlim=as.Date(plot_date))
lines(yearperiod$Date, yearperiod$ma30)
##
##Painter et al. Rising Limb
#Running mean flow since 1 January
for (i in 1:dim(yearperiod)[1]) {
yearperiod$runmeanPainter[i]<-sum(yearperiod$discharge_cfs[1:i])/i
}
plot(yearperiod$Date,yearperiod$rollmean, type='l', col='red', xlim=as.Date(plot_date), ylim = c(0,5000))
lines(yearperiod$Date, yearperiod$ma30)
lines(yearperiod$Date, yearperiod$discharge_cfs, col='blue')
lines(yearperiod$Date, yearperiod$runmeanPainter, col='green')
##Find percent change of Painter running mean:
for (i in 2:dim(yearperiod)[1]) {
yearperiod$perchange[1]<-NA
yearperiod$perchange[i]<- ((yearperiod$runmeanPainter)[i]/yearperiod$runmeanPainter[i-1]*100)-100
}
plot(yearperiod$Date, yearperiod$perchange, type='l', col='red', xlim=as.Date(plot_date), ylim = c(0,20))
abline(h=1)
assign(paste0("watershed_", yearperiod$year[1]), yearperiod, envir = globalenv())
}
###Application of functions
siteNumber <- watershdfire.df$GAGE_ID[5] # USGS gauge number
fire_year <- watershdfire.df$year[5]
watershed_allyears<-streamflow_analysis(siteNumber, parameterCd, startDate, endDate)
watershed_name <- dataRetrieval::readNWISdv(siteNumber, parameterCd, startDate, endDate)
siteNumber
watershdfire.df$GAGE_ID[253]
watershdfire.df$GAGE_ID[254]
# Pull in gage for fire identifying parameters for data download
siteNumber <- watershdfire.df$GAGE_ID[254] # USGS gauge number
fire_year <- watershdfire.df$year[254]
watershed_name <- dataRetrieval::readNWISdv(siteNumber, parameterCd, startDate, endDate)
names(watershed_name)
colnames(watershed_name)[4]<- 'discharge_cfs'
watershed_name<-watershed_name[,-5]
names(watershed_name)
watershed_name$year <-lubridate::year(watershed_name$Date) # add year col
watershed_name$month <-lubridate::month(watershed_name$Date) # add month col
watershed_name$day <-lubridate::day(watershed_name$Date) # add day of month col
watershed_name$doy <-lubridate::yday(watershed_name$Date) # add day of year col
watershed_name<-addWaterYear(watershed_name)
watershed_name
if(as.numeric(diff(range(watershed_name$Date))) != (nrow(watershed_name)+1)){
fullDates <- seq(from=min(watershed_name$Date),
to = max(watershed_name$Date), by="1 day")
fullDates <- data.frame(Date = fullDates,
agency_cd = watershed_name$agency_cd[1],
site_no = watershed_name$site_no[1],
stringsAsFactors = FALSE)
watershed_name <- full_join(watershed_name, fullDates,
by=c("Date","agency_cd","site_no")) %>%
arrange(Date)
}
watershed_name$year.fact<-as.factor(watershed_name$year)
watershed_ls<<-split(watershed_name, watershed_name$year.fact)
watershdfire.df$GAGE_ID[252]
lengths(streamflow_metrics.ls)
which(lengths(streamflow_metrics.ls) == 0)
watershdfire.df$GAGE_ID[14]
watershdfire.df$GAGE_ID[251]
watershdfire.df$GAGE_ID[90]
#These gages are not active after 2000
inactive_gages<-vector(mode = 'character')
#These gages are not active after 2000
numbers<-which(lengths(streamflow_metrics.ls) == 0)
numbers<-which(lengths(streamflow_metrics.ls) == 0)
inactive_gages<-vector(mode = 'character')
for (i in 1:length(numbers)){
inactive_gages[i]<-watershdfire.df$GAGE_ID[numbers[i]]
}
streamflow.df.tst<-rbindlist(streamflow_metrics.ls)
streammetrics.df<-rbindlist(streamflow_metrics.ls)
ggplot(streammetrics.df, aes(x=GAGE_ID, y=peakflow, fill=before_after_f)) +
geom_boxplot()
ggplot(streammetrics.df[1:40,], aes(x=GAGE_ID, y=peakflow, fill=before_after_f)) +
geom_boxplot()
summary(streammetrics.df$springonset_md)
summary(streammetrics.df$peakflow_cms)
ggplot(streammetrics.df[1:40,], aes(x=GAGE_ID, y=peakflow_cms, fill=before_after_f)) +
geom_boxplot() ylim = c(0,7))
ggplot(streammetrics.df[1:40,], aes(x=GAGE_ID, y=peakflow_cms, fill=before_after_f)) +
geom_boxplot()
ggplot(streammetrics.df, aes(x=GAGE_ID, y=peakflow_cms, fill=before_after_f)) +
geom_boxplot()
258-76
ggplot(streammetrics.df[1:50,], aes(x=GAGE_ID, y=peakflow_cms, fill=before_after_f)) +
geom_boxplot()
ggplot(streammetrics.df[1:100,], aes(x=GAGE_ID, y=peakflow_cms, fill=before_after_f)) +
geom_boxplot()
ggplot(streammetrics.df[1:400,], aes(x=GAGE_ID, y=peakflow_cms, fill=before_after_f)) +
geom_boxplot()
